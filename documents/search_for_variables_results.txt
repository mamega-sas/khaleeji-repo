101 results - 20 files

decision_rules\r03_decision.sas:
  9:    if profile.customer.total_spend_daily_ct[1] > 7 and profile.customer.total_spend_daily_sum[1] > 300 then do;

decision_rules\r04_decision.sas:
   9:  and message.solution.messageDtTm - profile.customer.financial_trx_dtm_arr[2] >= dhms(90, 0, 0, 0)
  12:  and not missing(profile.customer.financial_trx_dtm_arr[2])

decision_rules\r05_decision.sas:
  11: and profile.customer.total_spend_daily_sum[1] >300

decision_rules\r06_decision.sas:
  17:         if not missing(profile.device.cif_dtm_arr_of5_v2[i]) and current_dtm - profile.device.cif_dtm_arr_of5_v2[i] < dhms(0,0,30,0)  then do;

decision_rules\r07_decision.sas:
  16:         if message.solution.messageDtTm - profile.customer.devices_login_dt[i] <= dhms(0, 0, 30, 0)
  17:         and profile.customer.devices_login_dt[i] ne 0

decision_rules\r09_decision.sas:
  14:         if not missing(profile.customer.failed_login_dt[i])
  15:         and message.solution.messageDtTm - profile.customer.failed_login_dt[i] < dhms(7,0,0,0)

decision_rules\r11_decision.sas:
  24:     last_failed_login_dtm = profile.customer.failed_login_dtm_ar[1];
  26:         if not missing(profile.customer.failed_login_dtm_ar[i]) 
  27:         and profile.customer.failed_login_dtm_ar[i] > last_failed_login_dtm then do;
  28:             last_failed_login_dtm = profile.customer.failed_login_dtm_ar[i];
  32:         if not missing(profile.customer.failed_login_dtm_ar[k]) and abs(last_failed_login_dtm - profile.customer.failed_login_dtm_ar[k]) < dhms(0,0,10,0) then failed_login_count = failed_login_count + 1;

decision_rules\r13_decision.sas:
  15:         if message.solution.messageDtTm - profile.customer.financial_trx_dtm_arr[i] < dhms(0,0,10,0)
  16:         and not missing(profile.customer.financial_trx_dtm_arr[i])

decision_rules\r14_decision.sas:
  8: and not missing( profile.customer.last_acc_change )
  9: and message.solution.messageDtTm - profile.customer.last_acc_change < dhms(0, 12, 0, 0) 

decision_rules\r16_decision.sas:
  14:     and message.solution.messageDtTm - profile.customer_and_Beneficiary.bene_reg_dt <= hms(12, 0, 0)
  15:     and not missing(profile.customer_and_Beneficiary.bene_reg_dt))

decision_rules\r17_decision.sas:
  17:         if profile.beneficiary_customer.transaction_amount[j] = message.payment.amount
  18:         and message.solution.messageDtTm - profile.beneficiary_customer.transaction_dt[j] < dhms(0,0,15,0)
  19:         and not missing(profile.beneficiary_customer.transaction_amount[j])
  20:         and not missing(profile.beneficiary_customer.transaction_dt[j])

documents\extract_variables.py:
  7: # Extract variables starting with profile.

variable_rules\r03_daily_transaction_tracking_and_update.sas:
   5:     - profile.customer.total_spend_daily_dtm: Stores the timestamp of the last transaction.
   6:     - profile.customer.total_spend_daily_sum: An array tracking the total transaction amount per day.
   7:     - profile.customer.total_spend_daily_ct: An array tracking the count of transactions per day.
   8:     - profile.customer.interval: Stores the number of full days passed since the last transaction.
   9:     - profile.customer.interval_start: Stores the start time (midnight) of the last transaction's timestamp.
  10:     - profile.customer.interval_p: Stores the absolute value of the interval for backdated transactions.
  11:     - profile.customer.position: Maps interval to the array position for tracking backdated transactions.
  29:    /* interval_start = intnx('day', profile.customer.total_spend_daily_dtm, 0);  */
  30:    interval_start = datepart(profile.customer.total_spend_daily_dtm);
  39:    profile.customer.interval = interval;
  40:    profile.customer.interval_start = interval_start;
  43:    if profile.customer.total_spend_daily_dtm = 0 then do;  
  45:       profile.customer.total_spend_daily_sum[1] = message.payment.amount;
  46:       profile.customer.total_spend_daily_ct[1] = 1;
  47:       profile.customer.total_spend_daily_dtm = message.solution.messageDtTm;
  51:          profile.customer.total_spend_daily_ct[r] = 0;
  52:          profile.customer.total_spend_daily_sum[r] = 0;
  61:          profile.customer.total_spend_daily_sum[1] = profile.customer.total_spend_daily_sum[1] + message.payment.amount;
  62:          profile.customer.total_spend_daily_ct[1] = profile.customer.total_spend_daily_ct[1] + 1;
  71:                profile.customer.total_spend_daily_ct[j] = profile.customer.total_spend_daily_ct[k];
  72:                profile.customer.total_spend_daily_sum[j] = profile.customer.total_spend_daily_sum[k];
  76:             profile.customer.total_spend_daily_ct[1] = 0;
  77:             profile.customer.total_spend_daily_sum[1] = 0;
  80:             profile.customer.total_spend_daily_dtm = message.solution.messageDtTm;
  81:             profile.customer.total_spend_daily_ct[1] = 1;
  82:             profile.customer.total_spend_daily_sum[1] = message.payment.amount;
  92:          profile.customer.interval_p = interval_p;
  93:          profile.customer.position = position;
  94:          profile.customer.total_spend_daily_sum[position] = profile.customer.total_spend_daily_sum[position] + message.payment.amount;
  95:          profile.customer.total_spend_daily_ct[position] = profile.customer.total_spend_daily_ct[position] + 1;

variable_rules\r06_device_cif_access_history_update.sas:
  20:     arr_size = hbound(profile.device.cif_dtm_arr_of5_v2);
  24:         if profile.device.cif_arr_of5[j] = current_cif then do;
  25:             profile.device.cif_dtm_arr_of5_v2[j] = current_time;
  33:         oldest_dtm = profile.device.cif_dtm_arr_of5_v2[1];
  36:             if profile.device.cif_dtm_arr_of5_v2[k] < oldest_dtm then do;
  37:                 oldest_dtm = profile.device.cif_dtm_arr_of5_v2[k];
  43:             profile.device.cif_arr_of5[index_found] = current_cif;
  44:             profile.device.cif_dtm_arr_of5_v2[index_found] = current_time;

variable_rules\r07_update_device_login_history_for_customer.sas:
  20:         if missing(profile.customer.devices_login_dt[i] )
  21:         then profile.customer.devices_login_dt[i]= 0;
  24:         if profile.customer.devices_id[i] = message.device.macAddress
  28:             profile.customer.devices_login_dt[i] = message.solution.messageDtTm;
  32: 	min_dt = min(min_dt,profile.customer.devices_login_dt[i]);
  33: 	if min_dt = profile.customer.devices_login_dt[i]
  40:         profile.customer.devices_login_dt[min_ind] = message.solution.messageDtTm;
  41:         profile.customer.devices_id[min_ind] = message.device.macAddress;   

variable_rules\r11_failed_login_attempts_array_update.sas:
  17:     if profile.customer.null_array_flag = 0 then do;
  19:             if missing(profile.customer.failed_login_dtm_ar[j]) then do;
  20:                 profile.customer.failed_login_dtm_ar[j] = 0;
  23:         profile.customer.null_array_flag = 1;
  28:         profile.customer.failed_login_dtm_ar[i] = profile.customer.failed_login_dtm_ar[k];
  30:     profile.customer.failed_login_dtm_ar[1] = message.solution.messageDtTm;

variable_rules\r11_last 50 transaction amounts.sas:
   6:         profile.customer.financial_trx_amount_arr[i] = profile.customer.financial_trx_amount_arr[k];
   7:         profile.customer.financial_trx_dtm_arr[i] = profile.customer.financial_trx_dtm_arr[k];
  10:     profile.customer.financial_trx_dtm_arr[1] = message.solution.messageDtTm;
  11:     profile.customer.financial_trx_amount_arr[1] = message.payment.amount;

variable_rules\r14_kyc_account_change_timestamp_update.sas:
  8:     profile.customer.last_acc_change = message.solution.messageDtTm;

variable_rules\r16_update_beneficiary_registration_timestamp.sas:
  9:    profile.customer_and_Beneficiary.bene_reg_dt = message.solution.messageDtTm;

variable_rules\r17_shift_beneficiary_transaction_records.sas:
  14:         profile.beneficiary_customer.transaction_amount[i] = profile.beneficiary_customer.transaction_amount[k];
  15:         profile.beneficiary_customer.transaction_dt[i]=profile.beneficiary_customer.transaction_dt[k];
  18:     profile.beneficiary_customer.transaction_amount[1]= message.payment.amount;
  19:     profile.beneficiary_customer.transaction_dt[1] = message.solution.messageDtTm;
