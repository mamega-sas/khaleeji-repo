
   2      Rule Name: Multiple failed login attempts 
   2      Rule Name: Multiple payments to same beneficiary
   2      Rule Name: Multiple payments to same beneficiary
   3      Rule Description:
   3:     Rule Desctiption: If there are more than 3 payments were made to a single beneficiary(from single customer with single/multiple accounts), payment amount is same and all were in last 15 minutes. Next transaction is declined( Specific Nationalitie
   3:     Rule Desctiption: If there are more than 3 payments were made to a single beneficiary(from single customer with single/multiple accounts), payment amount is same and all were in last 15 minutes. Next transaction is declined( Specific Nationalitie
   3:     Rule Desctiption:If the customer consecutively  fails to login twice within 10 min time frame before the current outward financial transaction,  decline only if total of all such outward payment( in the next 2 hours post failed attempts) is exceeding BD 300.
   4          
   4      Rule variables:
   4  */
   4  */
   4:     If the customer consecutively fails to login twice within a 10-minute time frame before the current outward financial transaction:
   5          k = (i-1);
   5      - Decline the transaction only if:
   5:     - profile.customer.total_spend_daily_dtm: Stores the timestamp of the last transaction.
   6  if message.solution.channelType in ('DM','DI')
   6  if message.solution.source in ('FDTRF', 'ONEPAY', 'FDEFTSTRF', 'BILLPAY','CCREDPAY') 
   6  if message.solution.source in ('ONEPAY', 'FDEFTSTRE', 'FDTRE', 'CCREDPAY', 'BILLPAY')
   6:         profile.customer.financial_trx_amount_arr[i] = profile.customer.financial_trx_amount_arr[k];
   6:     - profile.customer.total_spend_daily_sum: An array tracking the total transaction amount per day.
   7  
   7  if message.solution.channelType in ('DM','DI')
   7:         profile.customer.financial_trx_dtm_arr[i] = profile.customer.financial_trx_dtm_arr[k];
   7:     - profile.customer.total_spend_daily_ct: An array tracking the count of transactions per day.
   7:  and message.solution.customerType = 'PE'
   7: and message.solution.customerType = 'PE'
   7: and message.solution.customerType in ('PE','BU')
   8      end;
   8   and message.solution.channeltype in ('DM', 'DI')
   8  and message.solution.source in ('ONEPAY','FDEFTSTRF','FDTRF','CCREDPAY','BILLPAY')
   8  if message.solution.channelType in ('DM','DI')
   8:     - profile.customer.interval: Stores the number of full days passed since the last transaction.
   8: and message.solution.customerType = 'PE'
   8: and not missing( profile.customer.last_acc_change )
   8: if message.solution.customerType = 'PE'
   9  
   9  and message.solution.channelType in ('DI', 'DM')
   9  and message.solution.source in ('ONEPAY','FDEFTSTRF','FDTRF','CCREDPAY','BILLPAY')
   9  if message.solution.channelType in ('DM','DI')
   9  if message.solution.source = 'LOGIN'
   9:     - profile.customer.interval_start: Stores the start time (midnight) of the last transaction's timestamp.
   9:  and message.solution.messageDtTm - profile.customer.financial_trx_dtm_arr[2] >= dhms(90, 0, 0, 0)
   9: and lists.BlackListed_Nationalities.contains(message.customer.nationality)
   9: and message.solution.customerType in  ('PE', 'BU')
   9: and message.solution.messageDtTm - profile.customer.last_acc_change < dhms(0, 12, 0, 0) 
  10          detection.Alert();
  10   and message.payment.amount >= 300
  10  and message.payment.amount > 300
  10  and message.payment.amount > 300 
  10  and message.solution.channelType in ('DI', 'DM')
  10  and message.solution.source in ('LOGIN')
  10  end;
  10  then do;
  10:     - profile.customer.interval_p: Stores the absolute value of the interval for backdated transactions.
  10:     profile.customer.financial_trx_dtm_arr[1] = message.solution.messageDtTm;
  10: and  lists.BlackListed_Nationalities.contains(message.customer.nationality)
  10: and message.solution.customerType = 'BU'
  10: and message.solution.customerType in  ('PE')
  11  and message.authentication.decision = 'A' 
  11  and message.solution.channelType = 'DM'
  11  and message.solution.source in ('ONEPAY','FDEFTSTRF','FDTRF','CCREDPAY','BILLPAY')
  11:     - profile.customer.position: Maps interval to the array position for tracking backdated transactions.
  11:     profile.customer.financial_trx_amount_arr[1] = message.payment.amount;
  11:  and lists.BlackListed_Nationalities.contains(message.customer.nationality)
  11: and lists.BlackListed_Nationalities.contains(message.customer.nationality)
  11: and lists.BlackListed_Nationalities.contains(message.customer.nationality)then do;
  11: and profile.customer.total_spend_daily_sum[1] >300
  12  
  12      detection.Alert();
  12  and (
  12  end;
  12  then do;
  12:  and not missing(profile.customer.financial_trx_dtm_arr[2])
  12: and lists.BlackListed_Nationalities.contains(message.customer.nationality)
  12: and message.solution.customerType = 'BU' 
  13          k=i-1;
  13          k=i-1;
  13      (message.solution.source in ('FDEFTSTRF', 'FDTRF', 'CCREDPAY', 'BILLPAY')
  13      do i = 1 to 6;
  13     and message.solution.channelType in ('DM', 'DI')
  13   then do;
  13  and message.solution.channelType = 'DM' then do;
  13  then do;
  14      do i = 1 to 50;
  14  if message.solution.channelType in ('DM','DI')
  14:         if not missing(profile.customer.failed_login_dt[i])
  14:         profile.beneficiary_customer.transaction_amount[i] = profile.beneficiary_customer.transaction_amount[k];
  14:         profile.customer.transaction_dt[i]=profile.customer.transaction_dt[k];
  14:     and message.solution.messageDtTm - profile.Customer_and_Beneficiary.bene_reg_dt <= hms(12, 0, 0)
  14:    and message.solution.customerType = 'PE' then do;
  15  
  15      do i=1 to 5;
  15      end;
  15:         and message.solution.messageDtTm - profile.customer.failed_login_dt[i] < dhms(7,0,0,0)
  15:         if message.solution.messageDtTm - profile.customer.financial_trx_dtm_arr[i] < dhms(0,0,10,0)
  15:         profile.beneficiary_customer.transaction_dt[i]=profile.beneficiary_customer.transaction_dt[k];
  15:     and not missing(profile.Customer_and_Beneficiary.bene_reg_dt))
  15: and message.solution.customerType = 'PE'
  16  
  16          then do;
  16      /* Set the array to zeros instead of nulls once only once, for safer comparisons */
  16      do j = 1 to 50;
  16      end;
  16      or
  16  and message.solution.source in ('ONEPAY','FDEFTSTRF','FDTRF','CCREDPAY','BILLPAY')
  16:         and not missing(profile.customer.financial_trx_dtm_arr[i])
  16:         if message.solution.messageDtTm - profile.customer.devices_login_dt[i] <= dhms(0, 0, 30, 0)
  17  
  17          then do;
  17      current_time = message.solution.messageDtTm;
  17:         and profile.customer.devices_login_dt[i] ne 0
  17:         if profile.beneficiary_customer.transaction_amount[j] = message.payment.amount
  17:     if profile.customer.null_array_flag = 0 then do;
  17:     profile.customer.transaction_dt[1]= message.solution.messageDtTm;
  18          do j = 1 to 6;
  18          then counter =counter +1;
  18  end;
  18:         and message.solution.messageDtTm - profile.beneficiary_customer.transaction_dt[j] < dhms(0,0,15,0)
  18:     current_cif = message.customer.identifier;
  18:     profile.beneficiary_customer.transaction_amount[1]= message.payment.amount;
  19  		/* replace null values with 0 */
  19      found_flag = 0;
  19:             if missing(profile.customer.failed_login_dtm_ar[j]) then do;
  19:         and not missing(profile.beneficiary_customer.transaction_amount[j])
  19:     profile.beneficiary_customer.transaction_dt[1] = message.solution.messageDtTm;
  20  end;
  20  if message.solution.source in ('FDTRF', 'ONEPAY', 'FDEFTSTRF', 'BILLPAY', 'CCREDPAY') 
  20:                 profile.customer.failed_login_dtm_ar[j] = 0;
  20:         and not missing(profile.beneficiary_customer.transaction_dt[j])
  20:         if missing(profile.customer.devices_login_dt[i] )
  21              end;
  21          then do;
  21:         then profile.customer.devices_login_dt[i]= 0;
  21: and message.solution.customerType = 'PE' then do;
  22  		
  22          end;
  22      failed_login_count = 0;
  23  		/* check if device is exist */
  23      current_dtm = message.solution.messageDtTm;
  23:         profile.customer.null_array_flag = 1;
  24      end;
  24:         if profile.customer.devices_id[i] = message.device.macAddress
  24:     last_failed_login_dtm = profile.customer.failed_login_dtm_ar[1];
  25          then do;
  25      do i = 2 to 6;        
  26:         if not missing(profile.customer.failed_login_dtm_ar[i]) 
  27              /* if device exists update the date */
  27          k = (i - 1);
  27:         and profile.customer.failed_login_dtm_ar[i] > last_failed_login_dtm then do;
  28     /* get the start time (midnight) of the last transaction's timestamp */
  28:             last_failed_login_dtm = profile.customer.failed_login_dtm_ar[i];
  28:             profile.customer.devices_login_dt[i] = message.solution.messageDtTm;
  28:         profile.customer.failed_login_dtm_ar[i] = profile.customer.failed_login_dtm_ar[k];
  29          end;
  29          end;
  29      end;
  29:    /* interval_start = intnx('day', profile.customer.total_spend_daily_dtm, 0);  */
  30:     profile.customer.failed_login_dtm_ar[1] = message.solution.messageDtTm;
  30:    interval_start = datepart(profile.customer.total_spend_daily_dtm);
  31  
  31  		/* get min datetime */
  31      do k = 1 to 6;
  31  #Message via CURL
  31  end;
  32: 	min_dt = min(min_dt,profile.customer.devices_login_dt[i]);
  32:         if not missing(profile.customer.failed_login_dtm_ar[k]) and abs(last_failed_login_dtm - profile.customer.failed_login_dtm_ar[k]) < dhms(0,0,10,0) then failed_login_count = failed_login_count + 1;
  32: curl -X POST 'http://10.243.10.205:32080/detection/decision/execute' -H "Content-Type: text/plain" -d '{"message":{"request":{"messageClassificationName":"SAMPLEmcns","restResponseFlg":0,"schemaName":"Card Fraud"},"solution":{"customerType":"NA","originationType":"NA","authenticationType":"NA","channelType":"NA","activityType":"CS"}}}'
  33  
  33      end;
  33: 	if min_dt = profile.customer.devices_login_dt[i]
  34  	then min_ind = i;
  38     /* update profile variables with interval data */
  39      then do;
  39:    profile.customer.interval = interval;
  40:         profile.customer.devices_login_dt[min_ind] = message.solution.messageDtTm;
  40:    profile.customer.interval_start = interval_start;
  41  
  41:         profile.customer.devices_id[min_ind] = message.device.macAddress;   
  42      end;
  42     /*CASE(1): first transaction ever */
  43:    if profile.customer.total_spend_daily_dtm = 0 then do;  
  44        /* initialize the first day's data with the current transaction */
  45:       profile.customer.total_spend_daily_sum[1] = message.payment.amount;
  46:       profile.customer.total_spend_daily_ct[1] = 1;
  47:       profile.customer.total_spend_daily_dtm = message.solution.messageDtTm;
  48  
  48  #Message via CURL
  49: curl -X POST 'http://10.243.10.205:32080/detection/decision/execute' -H "Content-Type: text/plain" -d '{"message":{"request":{"messageClassificationName":"SAMPLEmcns","restResponseFlg":0,"schemaName":"Card Fraud"},"solution":{"customerType":"NA","originationType":"NA","authenticationType":"NA","channelType":"NA","activityType":"CS"}}}'
  5  if message.solution.channelType in ('DM','DI')
  5  if message.solution.source in ('ONEPAY', 'FDEFTSTRE', 'FDTRE', 'CCREDPAY', 'BILLPAY')
  50  
  50        do r = 20 to 2 by -1;
  51:          profile.customer.total_spend_daily_ct[r] = 0;
  52:          profile.customer.total_spend_daily_sum[r] = 0;
  53        end;
  6  if message.solution.channelType in ('DM','DI')
  6:    and message.solution.customerType = 'PE'
  6:  and message.solution.customerType = 'PE'
  60           /* accumulate amount array and count array element no1 (current day) */
  61:          profile.customer.total_spend_daily_sum[1] = profile.customer.total_spend_daily_sum[1] + message.payment.amount;
  62:          profile.customer.total_spend_daily_ct[1] = profile.customer.total_spend_daily_ct[1] + 1;
  63        end;
  7     and message.solution.source in ('ONEPAY','FDEFTSTRF','FDTRF','CCREDPAY','BILLPAY') then do;
  7   and message.solution.channeltype in ('DM', 'DI')
  7  and message.authentication.decision = 'A' then do;
  7: and message.solution.customerType = 'BU'
  70                 k = j - 1;
  71:                profile.customer.total_spend_daily_ct[j] = profile.customer.total_spend_daily_ct[k];
  72:                profile.customer.total_spend_daily_sum[j] = profile.customer.total_spend_daily_sum[k];
  73              end;
  75           if i > 1 then do;
  76:             profile.customer.total_spend_daily_ct[1] = 0;
  77:             profile.customer.total_spend_daily_sum[1] = 0;
  78           end;
  79           else do;
  8      
  8  and message.solution.source in ('ONEPAY','FDEFTSTRF','FDTRF','CCREDPAY','BILLPAY')
  8  if message.solution.source in ('ONEPAY', 'FDEFTSTRE', 'FDTRE', 'CCREDPAY', 'BILLPAY')
  8  then do;
  8:     profile.customer.last_acc_change = message.solution.messageDtTm;
  80:             profile.customer.total_spend_daily_dtm = message.solution.messageDtTm;
  81:             profile.customer.total_spend_daily_ct[1] = 1;
  82:             profile.customer.total_spend_daily_sum[1] = message.payment.amount;
  83           end;
  9  end;
  9:    if profile.customer.total_spend_daily_ct[1] > 7 and profile.customer.total_spend_daily_sum[1] > 300 then do;
  9:    profile.Customer_and_Beneficiary.bene_reg_dt = message.solution.messageDtTm;
  9: and message.solution.customerType in ('PE', 'BU')
  91           position = interval_p + 1;
  92:          profile.customer.interval_p = interval_p;
  93:          profile.customer.position = position;
  94:          profile.customer.total_spend_daily_sum[position] = profile.customer.total_spend_daily_sum[position] + message.payment.amount;
  95:          profile.customer.total_spend_daily_ct[position] = profile.customer.total_spend_daily_ct[position] + 1;
  96        end;
# ContextLines: 1
# Query: customer
122 results - 25 files
commands_and_scripts\KB SFD Commands 3.bash:
commands_and_scripts\SFD Commands.bash:
decision_rules\r01_decision.sas:
decision_rules\r02_decision.sas:
decision_rules\r03_decision.sas:
decision_rules\r04_decision.sas:
decision_rules\r05_decision.sas:
decision_rules\r06_decision.sas:
decision_rules\r07_decision.sas:
decision_rules\r09_decision.sas:
decision_rules\r11_decision.sas:
decision_rules\r12_decision.sas:
decision_rules\r13_decision.sas:
decision_rules\r14_decision.sas:
decision_rules\r16_decision.sas:
decision_rules\r17_decision.sas:
variable_rules\r03_daily_transaction_tracking_and_update.sas:
variable_rules\r06_device_cif_access_history_update.sas:
variable_rules\r07_update_device_login_history_for_customer.sas:
variable_rules\r11_failed_login_attempts_array_update.sas:
variable_rules\r11_last 50 transaction amounts.sas:
variable_rules\r13_update_customer_transaction_timestamps.sas:
variable_rules\r14_kyc_account_change_timestamp_update.sas:
variable_rules\r16_update_beneficiary_registration_timestamp.sas:
variable_rules\r17_shift_beneficiary_transaction_records.sas:
